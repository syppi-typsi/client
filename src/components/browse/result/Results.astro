---
import Triangle from "../../icon/Triangle.astro";
import ResultFooter from "./ResultFooter.astro";
import ResultHeader from "./ResultHeader.astro";
---

<section class="container">
  <ResultHeader></ResultHeader>
  <section class="mainview">
    <section class="results">
    </section>
    <ResultFooter></ResultFooter>
  </section>
</section>

<template id="card-template">
  <a href="">
    <section class="card">
      <section class="image"><img alt=""></section>
      <section class="info">
        <h2 class="title"></h2>
        <section class="sub">
          <h4 class="manuf"></h4>
        </section>
        <div class="rating">
          <p></p>
        </div>
      </section>
      <Triangle class="bg-tri"></Triangle>
    </section>
  </a>
</template>

<script>
  function getSelectedIDs() {
    return Array.from(document.querySelectorAll(`.categories .checkboxes input[type="checkbox"]:checked`)).map(obj => {
      if (obj instanceof HTMLElement) {
        return obj.dataset.categoryId
      }
    })
  }

  function createGridCard(input) {
    const template = document.getElementById('card-template') as HTMLTemplateElement
    const content = template?.content.cloneNode(true) as HTMLElement

    const img = content.querySelector('img')!
    const title = content.querySelector('.title')!
    const manuf = content.querySelector('.manuf')!
    const rating = content.querySelector('.rating p')!
    const anchor = content.querySelector('a')!

    img.src = input.product_image ? input.product_image : "/img/syppi-typsi-bw-o.svg"
    title.innerHTML = input.name
    manuf.innerHTML = input.producer
    anchor.href = `/drink/${input.id}`

    if (input.rating) {
      rating.innerHTML = `${input.rating}/100`
    } else {
      rating.innerHTML = `?/100`
    }

    return content
  }

  const drinksData = await fetch("http://localhost:3000/drinks", {
    method: 'GET'
  }).then(response => response.json())

  for (const iterator of drinksData) {
    document.querySelector('.results')?.appendChild(createGridCard(iterator))
  }
</script>

<style lang="scss">
  .container {
    height: 100%;
    display: grid;
    gap: var(--pane-outline);
    grid-template-rows: min-content auto;
    overflow: hidden;
  }

  .mainview {
    overflow-y: scroll;
    display: grid;
    grid-template-rows: auto min-content;
  }

  .results {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(30ch, 1fr));
    grid-auto-rows: min-content;
    gap: 16px;
    background-color: var(--color-002);
    padding: 20px;
    h2 {
      font-weight: 500;
    }
  }

  a {
      text-decoration: none;
      color: inherit;
    }

  .card {
    display: grid;
    position: relative;
    overflow: hidden;
    grid-template-columns: 100px auto;
    align-items: end;
    gap: 8px;
    height: 200px;
    padding: 1em;
    border-radius: var(--element-border-radius);
    // background-color: var(--color-002);
    outline: var(--pane-outline) solid var(--color-003);

    .image {
      height: 100%;
      width: 100%;
      overflow: hidden;
      padding: 0 .5em;
      box-sizing: border-box;
    }

    img {
      height: 100%;
      width: 100%;
      object-fit: contain;
      object-position: bottom;
    }

    .info {
      display: flex;
      flex-direction: column;
      justify-content: end;
      gap: 4px;

      .title {
        line-height: 1.2;
        word-break: break-word;
      }

      .manuf {
        color: var(--color-005);
      }
    }

    .rating {
      font-size: 1.4em;
      font-weight: 600;
      white-space: nowrap;
    }

    .sub {
      display: flex;
      justify-content: space-between;
    }

    .bg-tri {
      position: absolute;
      top: -35px;
      right: -12px;
      height: 120px;
      width: auto;
      color: color-mix(in oklab, var(--color-primary) 40%, var(--color-001) 60%);
      transition: color 75ms ease-in-out;
    }

    &:hover .bg-tri {
      color: var(--color-primary);
    }
  }
</style>