---
import Collapsible from "./Collapsible.astro";
---

<section class="filters-container">
  <Collapsible title="Categories" class="categories" open>
    <section class="checkboxes">
    </section>
  </Collapsible>
  <Collapsible title="Filters" class="filters">
  </Collapsible>
</section>

<template id="checkboxTemplate">
  <section class="cb-container">
    <div class="center">
      <input type="checkbox" checked>
      <label></label>
    </div>
    <div class="children">
      <slot name="children"></slot>
    </div>
  </section>
</template>

<script>
  let categoriesData: Array<any>;

  const selectedSuffix = " selected";
  const selectedText = {
    categories: document.querySelector(".categories .header .count")!,
    filters: document.querySelector(".filters .header .count")!
  }

  async function getData() {
    return await fetch(`${import.meta.env.PUBLIC_API_URL}/categories`, {
      method: 'GET'
    }).then(response => response.json()).catch(() => window.location.href = '/oops')
  }

  function getChildren(id: number | null) {
    return categoriesData.filter((obj: { parent: number; }) => obj.parent === id)
  }
  
  function createCheckbox(name: string, id: number) {
    const template = document.getElementById('checkboxTemplate') as HTMLTemplateElement
    const content = template?.content.cloneNode(true) as HTMLElement

    const checkbox = content.querySelector('input[type="checkbox"]')! as HTMLInputElement
    const label = content.querySelector('label')!
    const children = content.querySelector('.children')!

    checkbox.id = `category-checkbox-${id.toString()}`
    checkbox.name = name
    checkbox.dataset.categoryId = id.toString()
    label.htmlFor = `category-checkbox-${id.toString()}`
    label.innerHTML = name

    // add all children recursively
    for (const iterator of getChildren(id)) {
      children.appendChild(createCheckbox(iterator.name, iterator.id))
    }

    return content
  }
  
  function updateChecked(suffix?: string) {
    const query = `.checkboxes input[type="checkbox"]${suffix || ''}`
    return {
      categories: document.querySelectorAll(`.categories ${query}`)!,
      filters: document.querySelectorAll(`.filters ${query}`)!
    }
  }
  
  function generateSelected(input: number) {
    if (input === 0) {
      return "None" + selectedSuffix
    } else {
      return input + selectedSuffix
    }
  }

  function updateCheckedText(checked, selectedText) {
    if (selectedText.categories === null && selectedText.filters === null) {
      return
    }
    selectedText.categories.innerHTML = generateSelected(checked.categories.length);
    selectedText.filters.innerHTML = generateSelected(checked.filters.length);
  }
  
  function changeAllChildren(element: HTMLInputElement) {
    const children = element.closest(".cb-container")!.querySelectorAll(`.children input[type="checkbox"]`)
    children.forEach((child) => {
      (child as HTMLInputElement).checked = element.checked
    })
  }
  
  function uncheckParents(element: HTMLInputElement) {
    if (!element.checked) {
      const parent = element.closest(".cb-container")!.parentElement!
      if (parent.className !== "checkboxes") {
        const parentBox: HTMLInputElement = parent.closest(".cb-container")!.querySelector(`input[type="checkbox"]`)!
        parentBox.checked = false;
        uncheckParents(parentBox)
      }
    }
  }
  
  function allSiblingsChecked(element: HTMLInputElement) {
    if (element.checked) {
      const parent = element.closest(".cb-container")!.parentElement!
      if (parent.className !== "checkboxes") {
        const parentBox: HTMLInputElement = parent.closest(".cb-container")!.querySelector(`input[type="checkbox"]`)!
        const children = parent.querySelectorAll(`.children input[type="checkbox"]`)
        if (Array.from(children).every((el) => (el as HTMLInputElement).checked)) {
          parentBox.checked = true
          allSiblingsChecked(parentBox)
        }
      }
    }
  }

  async function initialize() {
    categoriesData = await getData() // get categories data

    for (const iterator of getChildren(null)) { // for every root category
      document.querySelector('.checkboxes')?.appendChild(createCheckbox(iterator.name, iterator.id)) // add it and its children to DOM
    }

    const selectedText = {
      categories: document.querySelector(".categories .header .count"),
      filters: document.querySelector(".filters .header .count")
    }
    
    Object.values(updateChecked()).forEach((value) => {
      value.forEach((element) => {
        element.addEventListener("change", () => {
          changeAllChildren(element as HTMLInputElement)
          uncheckParents(element as HTMLInputElement)
          allSiblingsChecked(element as HTMLInputElement)
          updateCheckedText(updateChecked(":checked"),selectedText)
        })
      })
    })
    
    updateCheckedText(updateChecked(":checked"),selectedText)
  }

  initialize()
  
  document.addEventListener('astro:after-swap', () => {
    initialize()
  })
</script>

<style lang="scss">
  .filters-container {
    z-index: 10;
    background-color: var(--color-001);
    color: var(--color-005);
    display: flex;
    flex-direction: column;
    // gap: 16px;
    padding: 20px;
    outline: var(--pane-outline) solid var(--color-003);
    overflow-y: scroll;
  }

  .checkboxes {
    font-size: 1em;
  }

  .cb-container {
    display: flex;
    flex-direction: column;
    gap: .4em;
    
    .children {
      padding-left: 1.2em;
    }
  
    .center {
      display: flex;
      gap: .5em;
      align-items: center;
    }
  
    label {
      font-size: 1.2em;
      font-weight: 500;
    }
  }

</style>