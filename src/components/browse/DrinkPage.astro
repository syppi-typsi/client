---
import ArrowLeftTail from "../icon/ArrowLeftTail.astro";
import Nutrition from "./Nutrition.astro";

const { data } = Astro.props;

const categoryData = await fetch(
	`${import.meta.env.PUBLIC_API_URL}/categories/${data.category}`,
	{
		method: "GET",
	},
).then((response) => response.json());

const placeData =
	data.places !== null
		? await fetch(`${import.meta.env.PUBLIC_API_URL}/places/${data.places}`, {
				method: "GET",
			}).then((response) => response.json())
		: {};

const userRating = await fetch(
	`${import.meta.env.PUBLIC_API_URL}/drinks/${data.id}/rate`,
	{
		method: "GET",
	},
)
	.then((response) => response.json())
	.catch(() => {
		return {};
	});

const volumesText = (() => {
	if (data.volumes === null || data.volumes.length === 0) {
		return replaceMissing(null);
	}
	return data.volumes
		.map((vol: number) => {
			if (vol >= 1000) {
				return `${vol / 1000}L`;
			}
			return `${vol}ml`;
		})
		.join(", ");
})();

function replaceMissing(input: string | null, other = "No data", suffix = "") {
	if (input === null || input === undefined) {
		return other;
	}
	return `${input}${suffix}`;
}
---

<section class="container">
  <section class="back">
    <p>{categoryData.name} / {data.name}</p>
    <a href="/"><ArrowLeftTail/><strong>Back</strong></a>
  </section>
  <main class="content">
    <section class="image">
      <img src={data.product_image || "/img/syppi-typsi-bw-o.svg"} alt="">
    </section>
    <section class="info">
      <section class="top">
        <img src="/img/syppi-typsi-bw-o.svg" alt="" class="logo">
        <section class="titles">
          <h2 class="name">{data.name}</h2>
          <h3 class="producer">{data.producer}</h3>
        </section>
        <section class="rating">
          <h2 class="avg">{replaceMissing(data.rating,"No data","/100")}</h2>
          <p>Your rating:</p>
          <section class="user">
            <input type="text" inputmode="numeric" pattern="[0-9]*" name="rating" id="rating" placeholder="?" autocomplete="off" value={userRating.rating} data-drink-id={data.id}>
            <h2>
              /100
            </h2>
          </section>
        </section>
      </section>
      <p class="desc">{replaceMissing(data.description, "(No description)")}</p>
      <section class="details">
        <div class="detail">
          <p>Brand</p>
          <p>{replaceMissing(data.brand)}</p>
        </div>
        {Astro.url.hostname.split(".")[0] === "typsi" && <div class="detail">
          <p>ABV</p>
          <p>{replaceMissing((data.abv*100).toString())}%</p>
        </div>}
        <div class="detail">
          <p>Volumes</p>
          <p>{volumesText}</p>
        </div>
        <div class="detail">
          <p>Avalibility</p>
          <p>{replaceMissing(placeData.name)}</p>
        </div>
        {
          data.nutritional_value !== null && 
            <hr>
            <div class="detail">
              <p>Nutritional value</p>
              <p>per {replaceMissing(data.nutritional_value.serving,"N/A","ml")}:</p>
            </div>
            <Nutrition data={data.nutritional_value}></Nutrition>
        }
      </section>
    </section>
  </main>
</section>

<script>
  const ratingInput = document.querySelector('.info .rating .user input[type="text"]') as HTMLInputElement;

  async function sendRating() {
    const id = ratingInput.dataset.drinkId
    const secret = localStorage.getItem('secret')
    if (ratingInput.value === '') {
      await fetch(`${import.meta.env.PUBLIC_API_URL}/drinks/${id}/rate`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${secret}`
        }
      }).catch(() => window.location.href = '/oops')
      return true
    }
    
    const value = +ratingInput.value
    if (value < 0 || value > 100 || !Number.isInteger(value)) {
      console.log(value);
      return false
    }
    await fetch(`${import.meta.env.PUBLIC_API_URL}/drinks/${id}/rate`, {
      method: 'PUT',
      headers: {
        Authorization: `Bearer ${secret}`
      },
      body: JSON.stringify(
        {
          "rating": value,
        }
      )
    }).catch(() => window.location.href = '/oops')
    return true
  }

  ratingInput?.addEventListener('keypress', async (e) => {
    if ((e as KeyboardEvent).key === 'Enter') {
      if (await sendRating()) {
        window.location.reload()
      }
    }
  })
  ratingInput.addEventListener('focusout', async (e) => {
    if (await sendRating()) {
      window.location.reload()
    }
  })
</script>

<style lang="scss">
  .container {
    display: grid;
    grid-template-rows: min-content auto;
    margin-inline: auto;
    width: min(110ch, 100% - 14rem);
    min-height: 100%;
  }

  .back {
    display: grid;
    gap: .3em;
    padding-top: 1em;
    font-size: 1.2em;
    color: var(--color-004);
    p {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap; 
    }
    a {
      display: grid;
      grid-template-columns: 1fr 1fr;
      align-items: center;
      gap: .4rem;
      width: min-content;
      white-space: nowrap;
      font-size: 1.3em;
      text-decoration: none;
      color: var(--color-005);
    }
  }

  .content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(30ch,1fr));
    min-height: 100%;

    .image {
      width: 100%;
      min-height: 500px;
      padding: 6rem;
      box-sizing: border-box;
      overflow: hidden;

      img {
        width: 100%;
        height: 100%;
        object-fit: contain;
      }
    }

    .info {
      display: flex;
      flex-direction: column;
      height: min-content;
      gap: 1.2rem;
      padding-bottom: 5em;

      .top {
        display: grid;
        grid-template-columns: auto min-content;
        gap: 2em;
        position: relative;

        .rating {
          display: flex;
          flex-direction: column;
          align-items: end;
          gap: 2px;
          * {
            white-space: nowrap;
          }
          .avg {
            font-weight: 450;
            font-size: 2.8em;
          }
          .user {
            display: flex;
            align-items: baseline;
            gap: .5ch;
            input[type="text"] {
              -moz-appearance: textfield;
              font-size: 1.5rem;
              background: var(--color-002);
              border: 2px solid var(--color-003);
              width: 3ch;
              padding: 1px 4px;
              font-weight: 600;
              border-radius: var(--element-border-radius);
              text-align: center;
              font-family: inherit;
            }
            input::-webkit-outer-spin-button,
            input::-webkit-inner-spin-button {
              -webkit-appearance: none;
              margin: 0;
            }
          }
        }
      }

      .logo {
        z-index: -5;
        user-select: none;
        position: absolute;
        top: -10px;
        right: 0;
        transform: rotate(-15deg);
        opacity: 0.15;
        height: 20rem;
      }
      .name {
        font-size: 2.8rem;
        font-weight: 650;
        line-height: 1.2em;
        word-break: break-word;
      }
      .producer {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--color-005);
      }
      .desc {
        font-weight: 500;
        color: var(--color-005);
      }
      .details {
        display: flex;
        flex-direction: column;
        gap: .4em;

        hr {
          margin: .5em 0;
        }
      }
      .detail {
        display: flex;
        justify-content: space-between;
        gap: 1em;
        font-size: 1.4rem;
        p:nth-child(1) {
          font-weight: 700;
        }
        p:nth-child(2) {
          font-weight: 400;
          text-align: right;
        }
      }
    }
  }
</style>